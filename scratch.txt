00 -> a
01 -> b
10 -> c
11 -> d

EDGE CASES:
when input is valid but bit shifts is impossible to create valid string

a=3, b=9, c=0, d=3
000111

a=10, b=8, c=7, d=3
01001010

a=45, b=100, c=0, d=45
#0=10, #1=10

a=49995000, b=100000000, c=0, d=49995000
#0=10000, #1=10000



CASE OF FAILURE:
    a=3, b=6, c=3, d=3
    010101

start with 0 and 1 (to satisfy a, d):
    000111      -> a=3, b=9, c=0, d=3
shift 0s right (to satisfy b, c):
    001011      -> a=3, b=8, c=1, d=3


algorithm:
a=3, b=4, c=2, d=1
verify a, d are valid: 
    #0=3
    #1=2
start with alternating 0s and 1s bitstring until a, d satisfied:
    01010       -> a=3, b=3, c=3, d=1
need to increase "01" frequency, shift a '1' down:
    01001       -> a=3, b=4, c=2, d=1
    00110       -> a=3, b=4, c=2, d=1

----------------------------------------
a=6, b=14, c=2, d=6
verify a, d are valid:
    #0=4
    #1=4
alternate 0s and 1s:
    01010101    -> a=4, b=10, c=6, d=4
need to increase "01" frequency, shift '1's down:
    01010011    -> a=4, b=11, c=5, d=4
    01001011    -> a=4, b=12, c=4, d=4
    01000111    -> a=4, b=13, c=3, d=4
    00100111    -> a=4, b=14, c=2, d=4



========================================
a=3, b=3, c=0, d=0
0001

1000        -> a=3, b=0, c=3, d=0
0100        -> a=3, b=1, c=2, d=0
0010        -> a=3, b=2, c=1, d=0
0001        -> a=3, b=3, c=0, d=0

========================================
a=6, b=2, c=6, d=1
011000

010100      -> a=6, b=3, c=5, d=1
011000      -> a=6, b=2, c=6, d=1

if need increase c: shift rightmost '1's left
if need increase b: shift rightmost '1's right
